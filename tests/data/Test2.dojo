// Include basic Dojo, mobile, XHR dependencies along with
 var vommondLoggerUser = null;
 
 var vommonLoggingQueue = []
 
 var vommonLoggingQueuePos = 0;
 
 var vommonLoggingQueueMax = 200;
 
 var vommonLoggingErros= 0;
 
 var vommonLoggingDebugLevel = 0;
 
 
define([ "dojo/_base/declare",
         "dojo/json",
		 "dojo/dom-class",
         "dojo/request"

], function(declare, json,  request) {
	// Return the declared class!
	return declare("de.vommond.Logger", [], {

    
	debugLevel :-1,
	
	serverDebugLevel :2,
	
	prefix :null,
	
	url : "/rest/log/error",
	
	constructor: function(params){		
		this.className = params.className;		
	},
	
	setUser:function(u){
		vommondLoggerUser = u;
	},
	
	
	writeQueue:function(){
		var q = "";
	
		try{
			vommonLoggingQueue.sort(function(a,b){
				return b.t -a.t;
			});
			
			for(var i=0; i <vommonLoggingQueue.length-1; i++){

				if(vommonLoggingQueue[i]){
					q+=new Date(vommonLoggingQueue[i].t).toISOString() + " - "  + vommonLoggingQueue[i].m +"\n";
				}
		
			}
		} catch( e){
			
		}
	
		return q;
	},
	
	
	sendError:function(e){
		//console.error("Logger.sendError() >  " + e.stack);
		
		var plugins = "";
		for(var i=0;i<navigator.plugins.length;i++){
			plugins+=navigator.plugins[i].name + "/n"; 
		}


		if(vommonLoggingErros < 10){
			var q = this.writeQueue();

			var msg = {
				level : 0,
				url : location.href,
				message : e.message,
				stack : e.stack,
				ua : navigator.userAgent,
				appCodeName : navigator.appCodeName,
				appName : navigator.appName,
				platform : navigator.platform,
				user : vommondLoggerUser,
				plugins : plugins,
				queue : q
			};
			
			
			var params = {  
				handleAs: "json",
			    method : "post",
			    sync: false,
			    data : json.stringify(msg)
			};


			request(this.url, params).then(function(data){	
				  //console.debug("Logger.sendError() > msg send");		  
			  }, function(err){
				  console.warn("Logger.sendError() > could not send");	
			  }, function(evt){
			    
			  });
			
			vommonLoggingErros++;
		}
		
		
		
	},
	
	error: function(method, message, error){
		var m = this.className + "."+method;
		console.error(m + " >> " + message);
		if(error){
			console.error(error.message);
			console.error(error.stack);
		}
	},
	
	warn: function(method, message){
		this.warning(0, method, message);
	},	
	
	warning: function(level,method, message){
		var m = this.className + "."+method;
		if(vommonLoggingDebugLevel >= level){
			if(this.prefix){
				if(m.indexOf(this.prefix) == 0){
					console.warn(m + " >> " + message);
				}
			}else{
				console.warn(m + " >> " + message);
			}
		}	
	},	
	
	log:function(level, method, message, obj){
		var m = this.className + "."+method;
		if(vommonLoggingDebugLevel > level){
			if(this.prefix){
				if(m.indexOf(this.prefix) == 0){
					if (obj){
						console.debug(m + " >> " + message, obj);
					} else {
						console.debug(m + " >> " + message);
					}	
				}
			}else{
				if (obj){
					console.debug(m + " >> " + message, obj);
				} else {
					console.debug(m + " >> " + message);
				}	
			}
		}		

		if(this.serverDebugLevel > level){
			var entry = {
				t: new Date().getTime(),
				m : m+ " >> " + message
			}
			vommonLoggingQueue[vommonLoggingQueuePos] = entry;
			vommonLoggingQueuePos = (vommonLoggingQueuePos+1) % vommonLoggingQueueMax;
		}

	
	}
	
	
	
	});
});